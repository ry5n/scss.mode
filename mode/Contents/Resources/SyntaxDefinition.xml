<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>
	<head>
		<name>scss</name>
		<charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@]]></charsintokens>
		<charsincompletion><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@]]></charsincompletion>
	</head>
	<states>
		<default id="Base" usesymbolsfrommode="CSS" useautocompletefrommode="CSS" scope="meta.default">

			<!-- top level strings -->
			<state-link state="SingleString" mode="CSS"/>
			<state id="String" type="string" scope="style.value.string.double">
				<begin>
					<string>"</string>
				</begin>
				<end>
					<regex>(((?&lt;!\\)(\\\\)*)|^)"</regex>
				</end>

				<keywords id="Variables" useforautocomplete="no" scope="language.variable.sass">
					<regex>(\$[\d\w\-]+)</regex>
				</keywords>

				<state-link state="Interpolation" />
			</state>

			<keywords id="Rules" casesensitive="no" useforautocomplete="yes" scope="style.at-rule">
				<string>@import</string>
				<string>@media</string>

				<!-- Messages -->
				<string>@debug</string>
				<string>@warn</string>

				<!-- Mixins and Extend -->
				<string>@mixin</string>
				<string>@include</string>
				<string>@content</string>
				<string>@extend</string>

				<!-- Control Directives -->
				<string>@if</string>
				<string>@else if</string>
				<string>@else</string>
				<string>@for</string>
				<regex>(?:@for [^,\r\n]+)( from )</regex>
				<regex>(?:@for [^,\r\n]+)( to|through )</regex>
				<string>@each</string>
				<regex>(?:@each [^,\r\n]+)( in )</regex>
				<string>@while</string>

				<!-- Functions -->
				<string>@function</string>
				<string>@return</string>
			</keywords>

			<keywords id="Important Rules" casesensitive="no" useforautocomplete="yes" scope="style.at-rule.important">
				<string>@mixin</string>
			</keywords>

			<keywords id="Selectors" useforautocomplete="yes" scope="style.selector">
				<regex>(?&lt;=^|[\s,&amp;])(\*)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])([.#%][a-zA-Z0-9\.\#\_\-]*)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(a)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(abbr)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(address)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(area)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(article)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(aside)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(audio)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(b)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(bdi)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(bdo)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(blockquote)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(body)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(br)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(button)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(canvas)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(caption)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(cite)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(code)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(col)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(colgroup)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(command)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(data)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(datalist)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(dd)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(del)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(details)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(dfn)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(dialog)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(div)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(del)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(dl)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(dt)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(em)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(embed)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(fieldset)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(figcaption)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(figure)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(footer)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(form)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(h1)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(h2)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(h3)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(h4)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(h5)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(h6)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(head)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(header)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(hgroup)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(hr)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(html)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(i)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(iframe)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(img)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(input)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(ins)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(kbd)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(keygen)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(label)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(legend)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(li)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(link)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(map)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(mark)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(menu)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(meta)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(meter)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(nav)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(noscript)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(object)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(ol)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(optgroup)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(option)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(output)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(p)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(param)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(pre)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(progress)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(q)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(rp)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(rt)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(ruby)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(s)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(samp)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(section)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(select)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(small)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(source)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(span)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(strong)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(sub)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(submit)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(summary)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(sup)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(svg)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(table)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(tbody)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(td)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(textarea)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(tfoot)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(th)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(thead)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(time)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(title)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(tr)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(track)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(ul)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(var)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(video)[\s,:]</regex>
				<regex>(?&lt;=^|[\s,&amp;])(wbr)[\s,:]</regex>
			</keywords>

			<keywords id="Parent Selectors" useforautocomplete="no" scope="style.selector.parent">
				<regex>(&amp;)</regex>
			</keywords>

			<keywords id="Pseudo Selectors" useforautocomplete="no" scope="style.selector.pseudo">
				<regex>(:{1,2}link)</regex>
				<regex>(:{1,2}visited)</regex>
				<regex>(:{1,2}hover)</regex>
				<regex>(:{1,2}active)</regex>
				<regex>(:{1,2}focus)</regex>
				<regex>(:{1,2}before)</regex>
				<regex>(:{1,2}after)</regex>
				<regex>(:{1,2}not)</regex>
				<regex>(:{1,2}\-webkit\-[\w\-]+)</regex>
				<regex>(:{1,2}\-moz\-[\w\-]+)</regex>
				<regex>(:{1,2}\-ms\-[\w\-]+)</regex>
				<regex>(:{1,2}\-o\-[\w\-]+)</regex>
			</keywords>

			<state id="Attribute Selectors" type="string" scope="style.selector.attr">
				<begin><regex>(?:[a-zA-Z_\-]*)\[</regex></begin>
				<end><regex>\]</regex></end>
				<keywords id="Attribute Strings" useforautocomplete="no" scope="style.selector.attr.value">
					<regex>(?&lt;=\")(.*?)(?=\")</regex>
				</keywords>
			</state>

			<keywords id="Variables" useforautocomplete="no" scope="language.variable.sass">
				<regex>(\$[\d\w\-_]+)</regex>
			</keywords>

			<keywords id="CSS Colors" useforautocomplete="yes" scope="style.value.color.rgb-value">
				<regex>(#[\da-fA-F]{3,6})</regex>
			</keywords>

			<keywords id="CSS Digits" useforautocomplete="yes" scope="style.value.numeric">
				<regex>(?&lt;![#\d\w-])(-?[\d]+[ \t]*)(?:px|pt|em|ex|cm|in|mm|pc|s|ms|Hz|kHz|%|deg|rad|grad|turn|rem|ch|vw|vh|vmin|dpi)?</regex>
			</keywords>
			<keywords id="CSS Units" useforautocomplete="yes" scope="style.value.numeric.unit">
				<regex>(?:[\d]+[ \t]*)(px|pt|em|ex|cm|in|mm|pc|s|ms|Hz|kHz|%|deg|rad|grad|turn|rem|ch|vw|vh|vmin|dpi)</regex>
			</keywords>

			<keywords id="Sass functions" useforautocomplete="yes" casesensitive="no" scope="support.function.sass">
				<!-- RGB Function -->
				<regex>(?&lt;![\d\w])(rgb)\s*\(</regex>
				<regex>(?&lt;![\d\w])(rgba)\s*\(</regex>
				<regex>(?&lt;![\d\w])(red)\s*\(</regex>
				<regex>(?&lt;![\d\w])(green)\s*\(</regex>
				<regex>(?&lt;![\d\w])(blue)\s*\(</regex>
				<regex>(?&lt;![\d\w])(mix)\s*\(</regex>

				<!-- HSL Functions -->
				<regex>(?&lt;![\d\w])(hsl)\s*\(</regex>
				<regex>(?&lt;![\d\w])(hsla)\s*\(</regex>
				<regex>(?&lt;![\d\w])(hue)\s*\(</regex>
				<regex>(?&lt;![\d\w])(saturation)\s*\(</regex>
				<regex>(?&lt;![\d\w])(lightness)\s*\(</regex>
				<regex>(?&lt;![\d\w])(adjust-hue)\s*\(</regex>
				<regex>(?&lt;![\d\w])(lighten)\s*\(</regex>
				<regex>(?&lt;![\d\w])(darken)\s*\(</regex>
				<regex>(?&lt;![\d\w])(saturate)\s*\(</regex>
				<regex>(?&lt;![\d\w])(desaturate)\s*\(</regex>
				<regex>(?&lt;![\d\w])(grayscale)\s*\(</regex>
				<regex>(?&lt;![\d\w])(complement)\s*\(</regex>
				<regex>(?&lt;![\d\w])(invert)\s*\(</regex>

				<!-- Opacity Functions -->
				<regex>(?&lt;![\d\w])(alpha)\s*\(</regex>
				<regex>(?&lt;![\d\w])(opacity)\s*\(</regex>
				<regex>(?&lt;![\d\w])(opacify)\s*\(</regex>
				<regex>(?&lt;![\d\w])(fade-in)\s*\(</regex>
				<regex>(?&lt;![\d\w])(transparentize)\s*\(</regex>
				<regex>(?&lt;![\d\w])(fade-out)\s*\(</regex>

				<!-- Color Functions -->
				<regex>(?&lt;![\d\w])(adjust-color)\s*\(</regex>
				<regex>(?&lt;![\d\w])(scale-color)\s*\(</regex>
				<regex>(?&lt;![\d\w])(change-color)\s*\(</regex>

				<!-- String Functions -->
				<regex>(?&lt;![\d\w])(unqoute)\s*\(</regex>
				<regex>(?&lt;![\d\w])(quote)\s*\(</regex>

				<!-- Number Functions -->
				<regex>(?&lt;![\d\w])(percentage)\s*\(</regex>
				<regex>(?&lt;![\d\w])(round)\s*\(</regex>
				<regex>(?&lt;![\d\w])(ceil)\s*\(</regex>
				<regex>(?&lt;![\d\w])(floor)\s*\(</regex>
				<regex>(?&lt;![\d\w])(abs)\s*\(</regex>

				<!-- List Functions -->
				<regex>(?&lt;![\d\w])(length)\s*\(</regex>
				<regex>(?&lt;![\d\w])(nth)\s*\(</regex>
				<regex>(?&lt;![\d\w])(join)\s*\(</regex>
				<regex>(?&lt;![\d\w])(zip)\s*\(</regex>

				<!-- Introspect Functions -->
				<regex>(?&lt;![\d\w])(type[-_]of)\s*\(</regex>
				<regex>(?&lt;![\d\w])(unit)\s*\(</regex>
				<regex>(?&lt;![\d\w])(unitless)\s*\(</regex>
				<regex>(?&lt;![\d\w])(comparable)\s*\(</regex>

				<!-- Miscellaneous Functions -->
				<regex>(?&lt;![\d\w])(if)\s*\(</regex>

				<!-- Custom Functions -->
				<regex>(?&lt;![\d\w:])([a-zA-Z0-9_\-]+ *)\(</regex>
			</keywords>

			<keywords id="Sass mixins" useforautocomplete="yes" casesensitive="no" scope="support.mixin.sass">
				<regex>(?&lt;=@include)\s+([\w_-]+)</regex>
			</keywords>

			<keywords id="Sass mixin definitions" useforautocomplete="yes" casesensitive="no" scope="support.mixin.definition.sass">
				<regex>(?&lt;=@mixin)\s+([\w_-]+)</regex>
			</keywords>

			<!-- <keywords id="Sass extend" useforautocomplete="yes" casesensitive="no" scope="support.extend.sass">
				<regex>(?&lt;=@extend)\s+([.#%\[\*][a-zA-Z0-9\_\-\[\]\^\~\$\=\"]*)</regex>
			</keywords> -->

			<state id="Sass extend" type="string" scope="support.extend.sass">
				<begin><regex>(?&lt;=@extend)\s</regex></begin>
				<end><regex>;</regex></end>
			</state>

			<state id="SingleComment" type="comment" scope="style.comment.block">
				<begin><regex>(?://)</regex></begin>
				<end><regex>(?:[\n\r])|.?(?=\?&gt;)</regex></end>
			</state>

			<state id="Sass Params" type="string" scope="meta.function.params.sass">
				<begin><regex>(?&lt;=\().</regex></begin>
				<end><regex>\)</regex></end>

				<import keywords-only="yes" />

				<state-link state="AutodocComment" mode="CSS" />
				<state-link state="Comment" mode="CSS" />
				<state-link state="String" />
				<state-link state="SingleString" mode="CSS"/>
			</state>

			<state id="Inside curly brackets" foldable="yes" indent="yes" scope="meta.block.curly">
				<begin>
					<regex>{</regex>
					<autoend>}</autoend>
				</begin>
				<end>
					<regex>}</regex>
				</end>

				<import mode="CSS" state="Inside curly brackets" keywords-only="yes" />
				<state-link mode="CSS" state="AutodocComment"  />
				<state-link mode="CSS" state="Comment"  />
				<state-link mode="CSS" state="SingleString"  />

				<import keywords-only="yes" />
				<state-link state="String" />
				<state-link state="Interpolation" />
				<state-link state="SingleComment" />
				<state-link state="Sass Params" />
				<state-link state="Sass extend" />
				<state-link state="Attribute Selectors" />
				<state-link state="Inside curly brackets" />

				<keywords id="Sass mixins" useforautocomplete="yes" casesensitive="no" scope="support.mixin.sass">
					<regex>(?&lt;=@include)\s+([\w_-]+)</regex>
				</keywords>

				<keywords id="Property" scope="style.property">
					<regex>(^\s*[a-z\-]+)(?=\:\s)</regex>
					<regex>(?:^|\s*)(font)\s</regex>
					<regex>(?:^|\s*)(border)\s</regex>
					<regex>(?:^|\s*)(margin)\s</regex>
					<regex>(?:^|\s*)(padding)\s</regex>
				</keywords>

				<state id="Attribute state" scope="meta.block.attribute">
					<begin>
						<regex>(?&lt;=:)\s</regex>
					</begin>
					<end>
						<regex>(;|.(?=[}{])|[\n\r])</regex>
					</end>

					<import mode="CSS" state="Attribute state" />

					<import keywords-only="yes" />

					<keywords id="Variables" useforautocomplete="no" scope="language.variable.sass">
						<regex>(\$[\d\w\-]+)</regex>
					</keywords>

					<keywords id="!default" useforautocomplete="no" scope="meta.important.default">
						<string>!default</string>
					</keywords>
				</state>
			</state>

			<state id="Interpolation" useforautocomplete="no" scope="meta.interpolation">
				<begin>
					<string>#{</string>
				</begin>
				<end>
					<string>}</string>
				</end>

				<keywords id="Interpolate" useforautocomplete="no" scope="meta.interpolation.interpolate">
					<regex>(\$[\d\w-]+)</regex>
					<regex>(?&lt;![\d\w:])([a-zA-Z0-9_\-]+ *)\(</regex>
				</keywords>
			</state>

			<keywords id="!default" useforautocomplete="no" scope="meta.important.default">
				<string>!default</string>
			</keywords>
		</default>
	</states>
</syntax>
