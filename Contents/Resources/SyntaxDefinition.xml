<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>
	<head>
		<name>scss</name>
		<charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@]]></charsintokens>
		<charsincompletion><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@]]></charsincompletion>
	</head>
	<states>
		<default id="Base" usesymbolsfrommode="CSS" useautocompletefrommode="CSS" scope="meta.default">

			<keywords id="Rules" casesensitive="no" useforautocomplete="yes" scope="style.at-rule">
				<string>@import</string>
				<string>@media</string>

				<!-- Messages -->
				<string>@debug</string>
				<string>@warn</string>

				<!-- Mixins and Extend -->
				<string>@mixin</string>
				<string>@include</string>
				<string>@content</string>
				<string>@extend</string>

				<!-- Control Directives -->
				<string>@if</string>
				<string>@else if</string>
				<string>@else</string>
				<string>@for</string>
				<!-- <regex>( from )</regex>
				<regex>( to|through )</regex> -->
				<string>@each</string>
				<!-- <string>( in )</string> -->
				<string>@while</string>

				<!-- Functions -->
				<string>@function</string>
				<string>@return</string>
			</keywords>

			<!-- top level strings -->
			<state-link state="String" mode="CSS"/>
			<state-link state="SingleString" mode="CSS"/>

			<!-- gets us attribute state highlighting outside of {} -->
			<state-link state="Attribute state" mode="CSS" />

			<keywords id="Variables" useforautocomplete="no" scope="language.variable.sass">
				<regex>(\$[\d\w\-_]+)</regex>
			</keywords>

			<keywords id="Sass functions" useforautocomplete="yes" casesensitive="no" scope="support.function.sass">
				<!-- RGB Function -->
				<regex>(?&lt;![\d\w])(rgb)\s*\(</regex>
				<regex>(?&lt;![\d\w])(rgba)\s*\(</regex>
				<regex>(?&lt;![\d\w])(red)\s*\(</regex>
				<regex>(?&lt;![\d\w])(green)\s*\(</regex>
				<regex>(?&lt;![\d\w])(blue)\s*\(</regex>
				<regex>(?&lt;![\d\w])(mix)\s*\(</regex>

				<!-- HSL Functions -->
				<regex>(?&lt;![\d\w])(hsl)\s*\(</regex>
				<regex>(?&lt;![\d\w])(hsla)\s*\(</regex>
				<regex>(?&lt;![\d\w])(hue)\s*\(</regex>
				<regex>(?&lt;![\d\w])(saturation)\s*\(</regex>
				<regex>(?&lt;![\d\w])(lightness)\s*\(</regex>
				<regex>(?&lt;![\d\w])(adjust-hue)\s*\(</regex>
				<regex>(?&lt;![\d\w])(lighten)\s*\(</regex>
				<regex>(?&lt;![\d\w])(darken)\s*\(</regex>
				<regex>(?&lt;![\d\w])(saturate)\s*\(</regex>
				<regex>(?&lt;![\d\w])(desaturate)\s*\(</regex>
				<regex>(?&lt;![\d\w])(grayscale)\s*\(</regex>
				<regex>(?&lt;![\d\w])(complement)\s*\(</regex>
				<regex>(?&lt;![\d\w])(invert)\s*\(</regex>

				<!-- Opacity Functions -->
				<regex>(?&lt;![\d\w])(alpha)\s*\(</regex>
				<regex>(?&lt;![\d\w])(opacity)\s*\(</regex>
				<regex>(?&lt;![\d\w])(opacify)\s*\(</regex>
				<regex>(?&lt;![\d\w])(fade-in)\s*\(</regex>
				<regex>(?&lt;![\d\w])(transparentize)\s*\(</regex>
				<regex>(?&lt;![\d\w])(fade-out)\s*\(</regex>

				<!-- Color Functions -->
				<regex>(?&lt;![\d\w])(adjust-color)\s*\(</regex>
				<regex>(?&lt;![\d\w])(scale-color)\s*\(</regex>
				<regex>(?&lt;![\d\w])(change-color)\s*\(</regex>

				<!-- String Functions -->
				<regex>(?&lt;![\d\w])(unqoute)\s*\(</regex>
				<regex>(?&lt;![\d\w])(quote)\s*\(</regex>

				<!-- Number Functions -->
				<regex>(?&lt;![\d\w])(percentage)\s*\(</regex>
				<regex>(?&lt;![\d\w])(round)\s*\(</regex>
				<regex>(?&lt;![\d\w])(ceil)\s*\(</regex>
				<regex>(?&lt;![\d\w])(floor)\s*\(</regex>
				<regex>(?&lt;![\d\w])(abs)\s*\(</regex>

				<!-- List Functions -->
				<regex>(?&lt;![\d\w])(length)\s*\(</regex>
				<regex>(?&lt;![\d\w])(nth)\s*\(</regex>
				<regex>(?&lt;![\d\w])(join)\s*\(</regex>
				<regex>(?&lt;![\d\w])(zip)\s*\(</regex>

				<!-- Introspect Functions -->
				<regex>(?&lt;![\d\w])(type[-_]of)\s*\(</regex>
				<regex>(?&lt;![\d\w])(unit)\s*\(</regex>
				<regex>(?&lt;![\d\w])(unitless)\s*\(</regex>
				<regex>(?&lt;![\d\w])(comparable)\s*\(</regex>

				<!-- Miscellaneous Functions -->
				<regex>(?&lt;![\d\w])(if)\s*\(</regex>
			</keywords>

			<!-- Get comments and strings from the CSS mode -->
			<state-link state="AutodocComment" mode="CSS" />
			<state-link state="Comment" mode="CSS" />

			<state id="SingleComment" type="comment" scope="style.comment.block">
				<begin><regex>(?://)</regex></begin>
				<end><regex>(?:[\n\r])|.?(?=\?&gt;)</regex></end>
			</state>

			<keywords id="Selector" useforautocomplete="no" scope="style.selector">
				<regex>(\.[a-zA-Z0-9-_]+)</regex>
				<regex>(#[a-zA-Z0-9-_]+)</regex>
				<regex>(?<![,\s]|^)([a-z]*\s*)(?=,)</regex>
				<regex>[a-z]*\s+{</regex>
			</keywords>

			<!-- <keywords id="Selector" useforautocomplete="no" scope="style.selector">
				<regex>([-_.#\[\]:^=*"a-zA-Z&amp;](?:[-_a-zA-Z0-9\[\]:^=~*"\s&amp;])*?)(?=(?:,\n)|\s*[{&gt;+~])</regex>
				<regex>(.*?)(?=(?:,\n)|(?:\s*[{&gt;+~]))</regex>
			</keywords> -->

			<!--
			<keywords id="Block Delimeters" color="#8c8c8c" font-style="normal" useforautocomplete="no">
				<regex>^(?:\s*)(?:[a-z\#\.\,\:\%\[\*&amp;&gt;](?:.)+)({)</regex>
				<regex>(})\n</regex>
			</keywords> -->

			<state id="Inside curly brackets" foldable="yes" indent="yes" scope="meta.block.curly">
				<begin>
					<string>{</string>
					<autoend>}</autoend>
				</begin>
				<end>
					<regex>}</regex>
				</end>

				<state-link state="AutodocComment" mode="CSS" />
				<state-link state="Comment" mode="CSS" />
				<state-link state="SingleComment" />
				<state-link state="SingleString" mode="CSS" />

				<state id="String" type="string" scope="style.value.string.double">
					<begin>
						<string>"</string>
					</begin>
					<end>
						<regex>(((?&lt;!\\)(\\\\)*)|^)"</regex>
					</end>

					<keywords id="Variables" useforautocomplete="no" scope="language.variable.sass">
						<regex>(\$[\d\w\-]+)</regex>
					</keywords>
				</state>

				<import keywords-only="yes" />
				<import mode="CSS" state="Inside curly brackets" keywords-only="yes" />

				<!-- Nested or 'namespaced' properties -->
				<keywords id="Nested Properties" casesensitive="no" scope="style.property.name">
					<!-- font -->
					<string>family</string>
					<string>style</string>
					<string>weight</string>
					<string>size</string>
					<!-- margin/padding -->
					<string>top</string>
					<string>right</string>
					<string>bottom</string>
					<string>left</string>
					<!-- border (style is covered by font) -->
					<string>width</string>
					<string>color</string>
				</keywords>

				<state id="Attribute state" scope="meta.block.attribute">
					<begin>
						<regex>:</regex>
					</begin>
					<end>
						<regex>(;|.(?=[}{])|[\n\r])</regex>
					</end>
					<keywords id="!default" useforautocomplete="no" scope="meta.default">
							<regex>(!\s*default)</regex>
					</keywords>
					<keywords id="CSS Digits" useforautocomplete="yes" scope="style.value.numeric">
						<regex>(?&lt;![#\d\w-])(-?[\d]+[ \t]*(?:px|pt|em|ex|cm|in|mm|pc|s|ms|Hz|kHz|%|deg|rad|grad|turn|rem|ch|vw|vh|vmin|dpi)?)</regex>
					</keywords>
					<import mode="CSS" state="Attribute state" />
					<import keywords-only="yes" />
				</state>

				<import keywords-only="yes" />
				<state-link state="Inside curly brackets" />
			</state>

			<state id="Interpolation" useforautocomplete="no" scope="meta.interpolation">
				<begin>
					<string>#{</string>
				</begin>
				<end>
					<string>}</string>
				</end>

				<keywords id="Interpolate" useforautocomplete="no" scope="meta.interpolation">
					<regex>(\$[\d\w-]+)</regex>
				</keywords>
			</state>
		</default>
	</states>
</syntax>
